import boto3
import json
import time
from botocore.exceptions import ClientError, NoCredentialsError, EndpointConnectionError

# ----- CONFIG -----
ENDPOINT_NAME = "Financial-endpoint"  # üîß ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠ endpoint ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
REGION = "ap-southeast-2"
INPUT_TEXT = "‡∏ä‡πà‡∏ß‡∏¢‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πà‡∏≤‡∏ß‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πà‡∏≠‡∏¢"

MAX_RETRY = 3  # ‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà InService ‡∏à‡∏∞‡∏£‡∏≠‡∏ã‡πâ‡∏≥‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏Å‡∏µ‡πà‡∏Ñ‡∏£‡∏±‡πâ‡∏á


def check_endpoint_exists(sm_client):
    try:
        response = sm_client.describe_endpoint(EndpointName=ENDPOINT_NAME)
        return response["EndpointStatus"]
    except sm_client.exceptions.ClientError as e:
        if "Could not find" in str(e):
            print(f"Endpoint '{ENDPOINT_NAME}' ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ô SageMaker")
        else:
            print(f"ClientError: {e}")
        return None


def wait_for_endpoint_inservice(sm_client):
    print(f"‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Endpoint: '{ENDPOINT_NAME}'")
    for i in range(MAX_RETRY):
        status = check_endpoint_exists(sm_client)
        if status == "InService":
            print("Endpoint ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß")
            return True
        elif status == "Failed":
            print("Endpoint ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            return False
        else:
            print(f"‚åõ Status = {status}, ‡∏£‡∏≠ 10 ‡∏ß‡∏¥...")
            time.sleep(10)
    print("Endpoint ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏£‡∏≠‡∏Ñ‡∏£‡∏ö")
    return False


def run_inference(runtime_client):
    payload = {
        "inputs": INPUT_TEXT,
        "parameters": {
            "max_new_tokens": 50,
            "temperature": 0.7
        }
    }

    try:
        print("üì§ ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤ Endpoint...")
        response = runtime_client.invoke_endpoint(
            EndpointName=ENDPOINT_NAME,
            ContentType="application/json",
            Body=json.dumps(payload)
        )
        result = json.loads(response["Body"].read())
        print("\n‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•:\n", json.dumps(result, indent=2, ensure_ascii=False))

    except ClientError as e:
        print(f"ClientError ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Endpoint: {e}")
    except Exception as e:
        print(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏Ñ‡∏¥‡∏î: {e}")


def main():
    try:
        sm_client = boto3.client("sagemaker", region_name=REGION)
        runtime_client = boto3.client("sagemaker-runtime", region_name=REGION)

        if wait_for_endpoint_inservice(sm_client):
            run_inference(runtime_client)

    except NoCredentialsError:
        print("‡πÑ‡∏°‡πà‡∏û‡∏ö AWS credentials ‚Äî ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö `aws configure` ‡∏´‡∏£‡∏∑‡∏≠ GitHub Secrets")
    except EndpointConnectionError:
        print(f"‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö region '{REGION}' ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‚Äî ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï‡∏´‡∏£‡∏∑‡∏≠ AWS region")
    except Exception as e:
        print(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")


if __name__ == "__main__":
    main()
